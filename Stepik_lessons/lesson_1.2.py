
x = [234, 12]
print(id([234, 12]))                        # выводит индентификатор (как имя) объекта
print(id(x))                                            # даже для двух одинаковых объектов создаются разные id
print(x == [234, 12])
print(x is [234, 12])                       # 'is' - проверяет совпадают-ли id

y = x                                       # ! Но переменная не является объектом, она лишь ссылается на него (делает его имя проще и короче)
print(id(y))                                # В данном случае переменная y лишь ссылается на переменную x, которая в свою очередь ссылается на первый список
print()                                                 # И так как x и y являются лишь именем, по которому можно обратиться к одному и томуже объекту,
print(x == y)                                                                                                           # мы сравниваем объект с самим собой
print(x is y)                                           # и он не просто равен себе, он является с собой (просто к нему обратились по разным именам)
# В этом можно убедится следующим образом:
y.append(4)                                             # Добавляем элемент в объект списка через имя y
print(x)                                                # А выводим тот же самый объект через переменную x (4 там уже будет)

print(type(type))                   # Здесь можно заметить как я использую класс type, чтобы доказать, что тип type это класс type (Напоминание что ВСЁ это ОБЪЕКТ)

[12, 34], [12, 34]                  # Это два разных объекта        (Это верно для всех изменяемых объектов)
True, True                          # Это два одинаковых объекта (потому что другого True быть не может (он не изменяемый объект, в отличии от списка))
#                                                                   (Это верно для всех неизменяемых объектов)

# Final Program
objects = [True, 1, 1, 1, True, False, 2, 56]
ans = len(set([id(i) for i in objects]))
print(ans)