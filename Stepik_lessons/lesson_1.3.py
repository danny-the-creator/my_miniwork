# def - define, definition - определять, определение
list = [1, 2, 3]
x = list.pop()                      # ! функция 'pop' не просто удаляет последний элемент списка, она возвращает этот элемент (в данном случае она удалили 3 из списка
print(x)                                                                                                                                # и присвоила эту 3 переменной x)

x = print(4)
print(x is None)

# Program
def closest_mod_5(x):
    if x % 5 == 0:
        return x
    return x + 5 - (x % 5)

# def printab(a=10, b):             # Такая запись неверна, так как b является вторыи аргументом, и ему нужно передать значение во втором аргументе,
                # (b, a=10) -  верный вариант записи
#     print(a)                                  # а поскольку чтобы передать второй элемент, нужно передать и первый, это делает бессмысленным наше значение по умолчанию
#     print(b)
# printab(15)
# printab(a=15, b=2)              # Однако при самом вызове функции можно сначала задать значение аргументу со значением по умолчанию, а потом другому, у которого его нет

# Правильная запись функции, которая принимает все возможные аргументы имеет вид:
def FullFunk(a, b, c=10, d=True, *args, e=10, f, **kwargs):
    ''' a и b это позиционные аргументы (которые обязательно нужно передать в функцию)
        с и d это тоже позиционные аргументы, но они имеют значения по умолчанию (их можно не передавать в функцию)
        *args это список, в который войдут все позиционные аргументты, которые пользователь ввёл дополнительно (что-то кроме a,b,c,d в нашем случае)
        e и f это именованные аргументы, к ним можно обратиться только по имени
        !!! Важное замечание: Так как к этим аргументам можно обратиться только по имени, можно задать сначала элемент со значением по умолчанию, а после него без
        **kwargs это словарь, в который войдут все именованные элементы, введённые дополнительно пользователем, в виде пар ключ значения
                                                                                        (всё что пользователь введёт кроме a,b,c,d,e,f в нашем случае )

        !!! ЭТА КОНСТРУКЦИЯ СЛУЖИТ ПРИМЕРОМ !!! (В жизни нечто такое встречается крайне редко)'''

# Final Pragram

def C(n, k):
    if k == 0 or k == n:
        return 1
    if k > n:
        return 0
    return C(n - 1, k) + C(n - 1, k - 1)

n, k = map(int, input().split())
print()
print()
print(C(n, k))